{"version":3,"sources":["logo.svg","services/Queue.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Queue","props","state","queue","length","this","getQueue","newQueue","console","log","setState","requestOptions","method","headers","body","JSON","stringify","title","fetch","then","response","json","map","data","key","name","recording_url","priority","Component","Tick","date","Date","timerId","setInterval","tick","clearInterval","toLocaleTimeString","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,yKC6C5BC,G,wDAzCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CAACC,MAAO,GAAIC,OAAQ,GAFnB,E,gMAKOC,KAAKC,W,OAAtBC,E,OACJC,QAAQC,IAAIF,GACZF,KAAKK,SAAS,CACVP,MAAOI,EACPH,OAAQG,EAASH,S,uIAIrB,IAAMO,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,MAAO,gCAElC,OAAOC,MAAM,OAAQP,GAAgBQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,Y,+BAG/D,OAAIhB,KAAKH,MAAMC,MAEP,4BACKE,KAAKH,MAAMC,MAAMmB,KAAI,SAAAC,GAAI,OACtB,wBAAIC,IAAKD,EAAKE,MACV,2BAAIF,EAAKE,MACT,2BAAIF,EAAKG,eACT,2BAAIH,EAAKI,eAOjB,wC,GApCAC,c,ICadC,E,kDACJ,WAAY5B,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAAC4B,KAAM,IAAIC,MAFR,E,gEAIE,IAAD,OACjB1B,KAAK2B,QAAUC,aACb,kBAAM,EAAKC,SAAQ,O,6CAKrBC,cAAc9B,KAAK2B,W,6BAInB3B,KAAKK,SAAS,CACZoB,KAAM,IAAIC,S,+BAKZ,OACE,6BACE,kEACA,qCAAW1B,KAAKH,MAAM4B,KAAKM,2B,GAzBhBC,IAAMT,WA+BVU,EA1Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,a","file":"static/js/main.40b8bb2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport ReactTable from \"react-table\";\r\n\r\nclass Queue extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {queue: [], length: 0};\r\n    }\r\n    async componentDidMount(){\r\n        var newQueue = await this.getQueue();\r\n        console.log(newQueue);\r\n        this.setState({\r\n            queue: newQueue,\r\n            length: newQueue.length\r\n        });\r\n    }\r\n    getQueue(){\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ title: 'React POST Request Example' })\r\n        };\r\n        return fetch('/api', requestOptions).then(response => response.json());\r\n    }\r\n    render(){\r\n        if (this.state.queue){\r\n            return (\r\n                <ol>\r\n                    {this.state.queue.map(data => (\r\n                        <li key={data.name}>\r\n                            <p>{data.name}</p>\r\n                            <p>{data.recording_url}</p>\r\n                            <p>{data.priority}</p>\r\n                        </li>\r\n                    ))}\r\n                </ol>\r\n                )\r\n        }\r\n        else{\r\n            return (<div>Hi!</div>);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Queue;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Queue from './services/Queue.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Tick />\r\n        <Queue />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Tick extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n  componentDidMount(){\r\n    this.timerId = setInterval(\r\n      () => this.tick(), 1000\r\n    );\r\n  }\r\n  \r\n  componentWillUnmount(){\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  tick(){\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>Hello, mental healthcare provider!</h1>\r\n        <h2>It is {this.state.date.toLocaleTimeString()}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}